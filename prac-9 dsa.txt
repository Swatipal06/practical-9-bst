#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->left = newNode->right = nullptr;
    return newNode;
}
Node* insert(Node* root, int value) {
    if(root == nullptr) {
        return createNode(value);
    }
    if(value < root->data) {
        root->left = insert(root->left, value);
    } else if(value > root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}
Node* findMin(Node* node) {
    while(node->left != nullptr) {
        node = node->left;
    }
    return node;
}
Node* deleteNode(Node* root, int value) {
    if(root == nullptr)
    return root;
    if(value < root->data) {
        root->left = deleteNode(root->left, value);
    } else if(value > root->data) {
        root->right = deleteNode(root->right, value);
    } else {
        if(root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if(root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
void inOrder(Node* root) {
    if(root != nullptr) {
        inOrder(root->left);
        cout << root->data << " ";
        inOrder(root->right);
    }
}
int main() {
    Node* root = nullptr;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);
    
    cout << "Inorder Traversal of BST: ";
    inOrder(root);
    cout << endl;
    
    root = deleteNode(root, 20);
    cout << "After deleting 20: ";
    inOrder(root);
    cout << endl;
    
    root = deleteNode(root, 30);
    cout << "After deleting 30: ";
    inOrder(root);
    cout << endl;
    
    root = deleteNode(root, 50);
    cout << "After deleting 50: ";
    inOrder(root);
    cout << endl;

    return 0;
}